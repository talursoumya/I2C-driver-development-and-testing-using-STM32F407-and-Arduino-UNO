/*
 * stm32f407xx_i2c_driver.c
 *
 *  Created on: Jan 22, 2025
 *      Author: talur
 */

#include"stm32f407xx_i2c_driver.h"

uint16_t AHB_PreScaler[8]= {2,3,8,16,64,128,256,512};
uint16_t APB1_PreScaler[8]= {2,3,8,16,64,128,256,512};

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx);
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr);
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
	pI2Cx->CR1 |= (1<<I2C_CR1_START);
}

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
	SlaveAddr = SlaveAddr <<1;
	SlaveAddr &= ~(1);
	pI2Cx->DR = SlaveAddr;  //slave addr but r and w bit
}


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
	SlaveAddr = SlaveAddr <<1;
	SlaveAddr |= 1; //slaveAddr +r/nw bit=1
	pI2Cx->DR = SlaveAddr;  //slave addr but r and w bit
}

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
	uint32_t dummyread = pI2Cx->SR1;
	dummyread = pI2Cx->SR2;
	(void)dummyread;
}

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
}




uint32_t RCC_GetPCLK1Value(void)
{
	uint32_t pclk1,systemClk;

	uint8_t clksrc,temp,ahbp,apb1;

	clksrc = ((RCC->CFGR >>2) & 0x3);

	if(clksrc == 0)
	{
		systemClk = 16000000;
	}
	else if(clksrc ==1)
	{
		systemClk= 8000000;
	}
	else if(clksrc ==2)
	{
		systemClk = RCC_GetPLLOutputClock();
	}
	 temp = ((RCC->CFGR >>4)& 0XF);

	 if(temp <8)
	 {
		 ahbp =1;
	 }

	 else
	 {
		 ahbp = AHB_PreScaler[temp-8];
	 }
	 //for ahb
	 temp = ((RCC->CFGR >>10)& 0XF);

	 if(temp <4)
	 {
		 apb1 =1;
	 }

	 else
	 {
		 ahbp = APB1_PreScaler[temp-4];
	 }

	 pclk1= (systemClk/ahbp)/apb1;

	return pclk1;


}

//RCC_GetPLLOutputClock
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
	uint32_t tempreg = 0;

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl <<10;

	pI2CHandle->pI2Cx->CR1 = tempreg;

	//configure the freq field of CR2
	tempreg = 0;
	tempreg |= RCC_GetPCLK1Value()/1000000U ;
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0X3F);

	//program the device own address
	tempreg=0;
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
	tempreg |= (1<<14);
	pI2CHandle->pI2Cx->OAR1 = tempreg;

	//CCR calculations
	uint16_t ccr_value = 0;
	tempreg = 0;

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value()/(2 *pI2CHandle->I2C_Config.I2C_SCLSpeed));
		tempreg |= (ccr_value & 0xFFF);

	}
	else
	{
		//mode is fast mode
		tempreg |= (1<<15);
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
		{
			ccr_value = (RCC_GetPCLK1Value()/(3 *pI2CHandle->I2C_Config.I2C_SCLSpeed));
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value()/(25 *pI2CHandle->I2C_Config.I2C_SCLSpeed));
		}
		tempreg |= (ccr_value & 0xFFF);
	}

	pI2CHandle->pI2Cx->CCR = tempreg;

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value()/1000000U)+1;
	}
	else
	{
		//mode is fast mode
		tempreg = ((RCC_GetPCLK1Value()*300)/1000000U)+1;
	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
}


/* Data Send and Receive*/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer,uint32_t Len,uint8_t SlaveAddr)
{
	//1.Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

	//2.confirm that start generation ins completed by checking the SB flag in the SR1
	//SB is cleared SCL will be streched(pulled to low)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));

	//3.Send the address of the slave with r/w bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);

	//4.Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));

	//5.clear the ADDR flag according to its software sequence
	//Note :Until ADDR is cleared SCL will be stretched(pulled to low)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);

	//6.send the data until len becomes 0

	while(Len>0)
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));// wait untill TXE is set
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
		pTxBuffer++;
		Len--;
	}
	//7.when Len becomes zero wait for TXE=1  and BTF=1 before generating the STOP condition
	//Note : TXE =1 ,BTF=1 ,means that both SR and DR are empty and next transmission should begin
	//when BTF=1 SCL will be stretched(pulled to low

	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)));


	//8.Generate STOP condition and master need not to wait for the completion of stop condition
	//Note: generating STOP,automatically clears the BTF
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
}

void I2C_DeInit(I2C_RegDef_t *pI2Cx,uint32_t Flagname)
{

}


void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pI2Cx == I2C1)
		{
			I2C1_PCLK_EN();
		}else if (pI2Cx == I2C2)
		{
			I2C2_PCLK_EN();
		}else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_EN();
		}
	}
	else
	{
		//TODO
	}

}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
	if(pI2Cx->SR1 & FlagName)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}

uint32_t RCC_GetPLLOutputClock(void)
{

	return 0;
}


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer,uint8_t Len,uint8_t SlaveAddr)
{
	//1.Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

	//2. Confirm that start generation is completed by checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched (pulled LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);

	//4. wait until address phase is completed by checking thee ADDR flag in the SR1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));

	//procedure to read only 1 byte from slave

	if(Len ==1)
	{
		//Disable Acking
		I2C_ManageAckin();
		//clear the ADDR flag

		//wait untill RXNE becomes 1

		//generate STOP Condition

		//read data into buffer

		return;
	}

	//procedure to read data from slave when Len>1

	if(Len>1)
	{
		//clear the ADDR flag

		//read the data until Len becomes zero
		for(uint32_t i=Len;i>0;i--)
		{
			//wait until RXNE becomes 1

			if(i==2)//if the last2 bytes are remaining
			{
				//clear the ack bit

				//generate the STOP Condition
			}

			//read the data from the data register into buffer

			//increment the buffer address
		}

	}

	//re-enable Acking
}
