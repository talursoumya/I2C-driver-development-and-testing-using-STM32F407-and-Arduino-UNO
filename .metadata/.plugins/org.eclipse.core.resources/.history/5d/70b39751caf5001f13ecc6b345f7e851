/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include<stdio.h>
#include<string.h>
#include "stm32f407xx_gpio.h"
#include "stm32f407xx_i2c.h"

#define MY_ADDR 0x61
#define SLAVE_ADDR 0x68

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

I2C_Handle_t I2C1Handle;

uint8_t somedata[] = "We are testing I2C master Tx\n";

void delay(void)
{
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
}


/*
 * PB6 --> SCL
 * PB9 --> SDA
*/

void I2C1_GPIOInits(void)
{
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

	//SCLK
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
	GPIO_Init(&I2CPins);

	//SDA
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
	GPIO_Init(&I2CPins);



}

void I2C1_Inits(void)
{
	I2C1Handle.pI2Cx = I2C1;
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
	I2C_Init(&I2C1Handle);
}

void GPIO_ButtonInit(void)
{
	GPIO_Handle_t GpioBtn;
	//Choose button
		//Choose port
			GpioBtn.pGPIOx = GPIOA;
		//Choose pin number
			GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
		//choose pin mode
			GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
		//choose pin speed
			GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

		//choose push pull as output type
				GpioBtn.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;

		//button aldready has a pulldown register
			//GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;


		//GPIO register initialisation
			GPIO_Init(&GpioBtn);
}


int main(void)
{
	GPIO_ButtonInit();

	//I2C Pin Init
	I2C1_GPIOInits();

	//I2C peripheral configuration
	I2C1_Inits();

	//enable the I2C peripheral
	I2C_PeriClockControl(I2C1, ENABLE);

	//wait for button press
	while(1)
		{
		  	  while(!GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0));

		   	   delay();
		       

		        //send data to slave
		        I2C_MasterSendData(&I2C1Handle,somedata,strlen((char*)somedata),SLAVE_ADDR);
		}


}
