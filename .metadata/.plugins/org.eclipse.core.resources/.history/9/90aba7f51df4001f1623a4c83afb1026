/*
 * stm32f407xx_i2c_driver.c
 *
 *  Created on: Jan 22, 2025
 *      Author: talur
 */

#include"stm32f407xx_i2c_driver.h"

uint16_t AHB_PreScaler[8]= {2,3,8,16,64,128,256,512};
uint16_t APB1_PreScaler[8]= {2,3,8,16,64,128,256,512};


uint32_t RCC_GetPCLK1Value(void)
{
	uint32_t pclk1,systemClk;

	uint8_t clkscr,temp,ahbp,apb1;

	clkscr = ((RCC->CFGR >>2) & 0x3);

	if(clkscr == 0)
	{
		systemClk = 16000000;
	}
	else if(clkscr ==1)
	{
		systemClk= 8000000;
	}
	else if(clksrc ==2)
	{
		systemClk = RCC_GetPLLOutputClock();
	}
	 temp = ((RCC->CFGR >>4)& 0XF);

	 if(temp <8)
	 {
		 ahbp =1;
	 }

	 else
	 {
		 ahbp = AHB_PreScaler[temp-8];
	 }
	 //for ahb
	 temp = ((RCC->CFGR >>10)& 0XF);

	 if(temp <4)
	 {
		 apb1 =1;
	 }

	 else
	 {
		 ahbp = APB1_PreScaler[temp-4];
	 }

	 pclk1= (systemClk/ahbp)/apb1;

	return pclk1;


}

RCC_GetPLLOutputClock
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
	uint32_t tempreg = 0;

	//ack control bit
	temreg |= pI2CHandle->I2C_Config.I2C_AckControl <<10;

	pI2CHandle->pI2Cx->CR1 = tempreg;

	//configure the freq field of CR2
	tempreg = 0;
	tempreg = RCC_GetPCLK1Value()/1000000U ;
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0X3F);

	//program the device own address
	tempreg = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
	pI2CHandle->pI2Cx->OAR1 = tempreg;




}
void I2C_DeInit(I2C_RegDef_t *pI2Cx)
{

}
